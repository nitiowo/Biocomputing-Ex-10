divMin(10:100,3)
getwd()
setwd("Biocomputing-Ex-10")
#loads in packages
library(ggplot2)
#loads in the game data text file
game<-read.table("UWvMSU_1-22-13.txt",header=TRUE,sep="\t",stringsAsFactors = FALSE)
head(game)
#pre-allocate an empty data frame
score<-data.frame(ncol=3)
#pre-allocate an empty data frame
score<-data.frame(UW,MSU)
#pre-allocate an empty data frame
score<-data.frame(UW=numeric(),MSU=numeric())
score
#pre-allocate an empty data frame
score<-data.frame(UW=0,MSU=0)
score
for(i in 1:nrow(game)){
if(game$team[i]=="UW"){
newRow<-data.frame(UW=score$UW[nrow(score)]+game$score[i],MSU=score$MSU[nrow(score)])
score<-rbind(score,newRow)
}else{
newRow<-data.frame(MSU=score$MSU[nrow(score)]+game$score[i],UW=score$UW[nrow(score)])
score<-rbind(score,newRow)
}
}
score
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(UW,MSU)) +
geom_line() +
theme_classic()
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score) +
geom_line() +
theme_classic()
#pre-allocate an empty data frame
score<-data.frame(time=0,UW=0,MSU=0)
for(i in 1:nrow(game)){
#adds the number of points to the UW column in they score
if(game$team[i]=="UW"){
newRow<-data.frame(time=game$time[i],UW=score$UW[nrow(score)]+game$score[i],MSU=score$MSU[nrow(score)])
score<-rbind(score,newRow)
}else{
#adds the number of points to the MSU column if they score
newRow<-data.frame(time=game$time[i],MSU=score$MSU[nrow(score)]+game$score[i],UW=score$UW[nrow(score)])
score<-rbind(score,newRow)
}
}
score
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time,y=UW,MSU)) +
geom_line() +
theme_classic()
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time,y=c(UW,MSU)) +
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time) +
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time) +
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(y=MSU,color="green") +
geom_line(y=UW,color="red") +
theme_classic() +
xlab="Time of Game" +
ylab="Score"
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(y=MSU,color="green") +
geom_line(y=UW,color="red") +
theme_classic() +
xlab("Time of Game") +
ylab("Score")
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU),color="green") +
geom_line(aes(y=UW),color="red") +
theme_classic() +
xlab("Time of Game") +
ylab("Score")
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU),color="green",size=2) +
geom_line(aes(y=UW),color="red",size=2) +
theme_classic() +
xlab("Time of Game") +
ylab("Score")
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU),color="green",size=2) +
geom_line(aes(y=UW),color="red",size=2) +
theme_classic() +
xlab("Time of Game") +
ylab("Score") +
scale_fill_discrete(name="Team",labels=c(MSU,UW))
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU),color="green",size=2) +
geom_line(aes(y=UW),color="red",size=2) +
theme_classic() +
xlab("Time of Game") +
ylab("Score") +
scale_fill_discrete(name="Team",labels=c("MSU","UW"))
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU),color="green",size=2) +
geom_line(aes(y=UW),color="red",size=2) +
theme(legend.position = "Top") +
xlab("Time of Game") +
ylab("Score") +
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU),color="green",size=2) +
geom_line(aes(y=UW),color="red",size=2) +
theme(legend.position = "top") +
xlab("Time of Game") +
ylab("Score") +
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU),color="green",size=2) +
geom_line(aes(y=UW),color="red",size=2) +
theme.classic() +
xlab("Time of Game") +
ylab("Score") +
guide_legend()
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU),color="green",size=2) +
geom_line(aes(y=UW),color="red",size=2) +
theme.classic() +
xlab("Time of Game") +
ylab("Score")
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,color=MSU),size=2) +
geom_line(aes(y=UW,color=UW),size=2) +
theme_classic() +
xlab("Time of Game") +
ylab("Score") +
color="Teams"
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,color="MSU"),size=2) +
geom_line(aes(y=UW,color="UW"),size=2) +
theme_classic() +
xlab("Time of Game") +
ylab("Score") +
color="Teams"
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,linetype="MSU"),size=2) +
geom_line(aes(y=UW,linetype="UW"),size=2) +
theme_classic() +
labs(x="Time of Game",y="Score",linetype="Teams")
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,linetype="MSU"),color="green",size=2) +
geom_line(aes(y=UW,linetype="UW"),color="red",size=2) +
theme_classic() +
labs(x="Time of Game",y="Score",linetype="Teams")
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,linetype="MSU"),color="green",size=2) +
geom_line(aes(y=UW,linetype="UW"),color="red",size=2) +
theme_classic() +
labs(x="Time of Game",y="Score",linetype="Teams")
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,color="MSU"),linetype="solid",size=2) +
geom_line(aes(y=UW,color="UW"),linetype="solid",size=2) +
theme_classic() +
labs(x="Time of Game",y="Score",color="Teams") +
scale_color_manual(values=c("MSU"="green","UW"="red"))
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,color="MSU"),linetype="solid",size=1.5) +
geom_line(aes(y=UW,color="UW"),linetype="solid",size=1.5) +
theme_classic() +
labs(x="Time of Game",y="Score",color="Teams") +
scale_color_manual(values=c("MSU"="green","UW"="red"))
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,color="MSU"),linetype="solid",size=1.5) +
geom_line(aes(y=UW,color="UW"),linetype="solid",size=1.5) +
theme_classic() +
labs(x="Time of Game",y="Score",color="Teams") +
scale_color_manual(values=c("MSU"="darkgreen","UW"="darkred"))
#Generates a graph with the cumulative score of each team throughout the game
ggplot(data=score,aes(x=time)) +
geom_line(aes(y=MSU,color="MSU"),linetype="solid",size=1.5) +
geom_line(aes(y=UW,color="UW"),linetype="solid",size=1.5) +
theme_classic() +
labs(x="Time of Game",y="Score",color="Teams") +
scale_color_manual(values=c("MSU"="darkgreen","UW"="red"))
#generates a nuber between 1 and 100 and stores it in a variable
number<-sample(1:100,1)
number
readline(x)
readline()
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
}
number_guess()
guess_my_number <- function() {
# Generate a random number between 1 and 100
secret_number <- round(runif(1, min = 1, max = 100))
cat("Welcome to the Guess My Number Game!\n")
cat("Try to guess the secret number between 1 and 100.\n")
attempts <- 0
max_attempts <- 10
# Game loop
while (attempts < max_attempts) {
# Get user input
user_guess <- as.numeric(readline(prompt = "Enter your guess: "))
# Check if the guess is correct
if (user_guess == secret_number) {
cat("Congratulations! You guessed the correct number:", secret_number, "\n")
break
} else if (user_guess < secret_number) {
cat("Too low! Try again.\n")
} else {
cat("Too high! Try again.\n")
}
attempts <- attempts + 1
remaining_attempts <- max_attempts - attempts
cat("Remaining attempts:", remaining_attempts, "\n")
}
# If the player couldn't guess the number in the allowed attempts
if (attempts == max_attempts) {
cat("Sorry, you've run out of attempts. The correct number was:", secret_number, "\n")
}
}
guess_my_number()
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
if(attempts=10){
print("You ran out of tries...")
}
}
}
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts=10){
print("You ran out of tries...")
}
}
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts=10){
print("You ran out of tries...")
}}
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts=10){
print("You ran out of tries...")
}
}
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts=10){
print("You ran out of tries...")
}
}
number_guess()
fff
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts=10){
print("You ran out of tries...")
}
}
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<max){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts==10){
print("You ran out of tries...")
}
}
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<max){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts==10){
print("You ran out of tries...")
}
}
number_guess()
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts==10){
print("You ran out of tries...")
}
}
number_guess()
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
break
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
55
55
number_guess()
number_guess()
number_guess<-function() {
number<-sample(1:100,1)
print("I'm thinking of a number between 1 and 100...")
attempts<-0
while(attempts<10){
guess<-readline(prompt="Guess: ")
if(guess==number){
print("You got it!!!")
break
}else if(guess>number){
print("Too high!")
}else{
print("Too low!")
}
attempts<-attempts+1
}
if(attempts==10){
print("You ran out of tries...")
}
}
number_guess()
grade<-function(x){
if(sum(x[1:length(x),1])<100){
print("The file is correct, A+!")
}else{
print("Sorry you have failed")
}
}
data<-data.frame(1:20,ncol=1)
data
data<-data.frame(1:20)
data
grade(data)
data<-data.frame(1:100)
grade(data)
data
sum(data)
grade<-function(x){
if(sum(x)<100){
print("The file is correct, A+!")
}else{
print("Sorry you have failed")
}
}
grade(data)
data<-data.frame(1:20)
sum(data)
data<-data.frame(1:10)
sum(data)
grade(data)
list.files()
grade<-function(x){
y<-read.table(x)
if(sum(y)<100){
print("The file is correct, A+!")
}else{
print("Sorry you have failed")
}
}
grade(data)
grade<-function(x){
y<-read.table("x")
if(sum(y)<100){
print("The file is correct, A+!")
}else{
print("Sorry you have failed")
}
}
grade(data)
