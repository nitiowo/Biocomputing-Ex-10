item_analysis$index_scale <- index_scale
item_analysis$index_scale <- factor(item_analysis$index_scale, levels=c("Good","Fair","Poor"))
# Plot for Item Discrimination Index
ggplot(data=item_analysis, aes(x=factor(rownames(item_analysis), level=c("Q1a","Q1b","Q1c","Q1d","Q1e","Q2a","Q2b","Q2c","Q2d","Q2e","Q2f","Q3a","Q3b","Q3c","Q3d","Q3e","Q3f","Q4","Q5","Q6","Q7","Q8a","Q8b","Q8c","Q9a","Q9b","Q10")),y=Discrimination,group=index_scale))+
geom_point(aes(color=index_scale),size=2)+scale_color_manual(breaks=c("Good","Fair","Poor"), values=c("#009E73","#E69F00","#D55E00"))+scale_y_continuous(breaks=c(0,0.1,0.3,0.6))+
ggtitle("Exam 3 Question Discriminaiton Level")+ylab("Discriminaiton Index")+xlab("Questions")+geom_hline(yintercept=0.1,linetype="dashed",color="#E69F00",lwd=1)+geom_hline(yintercept=0.3,linetype="dashed",color="#009E73",lwd=1)+
labs(color="Index Scale")
# Import E4_Questions Dataset
library(readxl)
E4_Questions <- read_excel("C:/Users/thoma/OneDrive/Documents/NOTRE DAME SENIOR THESIS/Exam 4 Item Analysis/E4_Questions.xlsx",
sheet = "Item Analysis Data")
View(E4_Questions)
# Read in the Final Performance Groups Data
library(readxl)
final_performance_groups <- read_excel("C:/Users/thoma/OneDrive/Documents/NOTRE DAME SENIOR THESIS/Course Assessment Analysis/final_performance_groups.xlsx")
View(final_performance_groups)
# Item Analysis with the Psychometric Package
# Link to R Documentation: https://search.r-project.org/CRAN/refmans/psychometric/html/item.exam.html
library(psychometric)
library(ggplot2)
library(tidyverse)
# Filter E4_Question data down to the 391 students who have final performance groups
include <- c(E4_Questions$SID[E4_Questions$SID %in% final_performance_groups$SID])
E4_Questions <- subset(E4_Questions,E4_Questions$SID %in% include)
# Add a new column for Final Exam performance groups in E4_Questions
performance_groups <- list()
for (SID in E4_Questions$SID){
performance_groups <- append(performance_groups,final_performance_groups[final_performance_groups$SID == SID,"Group"])
}
performance_groups <- unlist(performance_groups)
E4_Questions$Group <- performance_groups
# Determine the number of students in each performance group
E4_Questions %>% count(Group)
# Conduct item level analysis
item_analysis <- item.exam(x=E4_Questions[,2:24],y=E4_Questions$Total,discrim=TRUE)
# Plot for Item Difficulty
ggplot(data=item_analysis, aes(x=factor(rownames(item_analysis), level=c("Q1","Q2a","Q2b","Q3","Q4","Q5","Q6a","Q6b","Q6c","Q6d","Q6e","Q6f","Q7a","Q7b","Q7c","Q7d","Q7e","Q7f","Q8","Q9","Q10","Q11","Q12")),y=Difficulty))+
geom_point(color="blue")+
ggtitle("Exam 4 Item Difficulty")+ylab("Question Difficulty")+xlab("Questions")+
expand_limits(y=c(0,1))+scale_y_continuous(breaks = c(0,0.2,0.4,0.6,0.8,1))
# Create a new variable in item_analysis for Item Discrimination Index scale
index_scale <- list()
for (row in 1:nrow(item_analysis)){
if (item_analysis[row,5]>=0.3){
index_scale <- append(index_scale,"Good")
} else if (item_analysis[row,5]<0.3 & item_analysis[row,5]>=0.1){
index_scale <- append(index_scale,"Fair")
} else {
index_scale <- append(index_scale,"Poor")
}
}
index_scale <- unlist(index_scale)
item_analysis$index_scale <- index_scale
item_analysis$index_scale <- factor(item_analysis$index_scale, levels=c("Good","Fair","Poor"))
# Plot for Item Discrimination Index
ggplot(data=item_analysis, aes(x=factor(rownames(item_analysis), level=c("Q1","Q2a","Q2b","Q3","Q4","Q5","Q6a","Q6b","Q6c","Q6d","Q6e","Q6f","Q7a","Q7b","Q7c","Q7d","Q7e","Q7f","Q8","Q9","Q10","Q11","Q12")),y=Discrimination,group=index_scale))+
geom_point(aes(color=index_scale),size=2)+scale_color_manual(breaks=c("Good","Fair","Poor"), values=c("#009E73","#E69F00","#D55E00"))+scale_y_continuous(breaks=c(0,0.1,0.3,0.6))+
ggtitle("Exam 4 Question Discriminaiton Level")+ylab("Discriminaiton Index")+xlab("Questions")+geom_hline(yintercept=0.1,linetype="dashed",color="#E69F00",lwd=1)+geom_hline(yintercept=0.3,linetype="dashed",color="#009E73",lwd=1)+
labs(color="Index Scale")
library(readxl)
final_performance_groups <- read_excel("C:/Users/thoma/OneDrive/Documents/NOTRE DAME SENIOR THESIS/Course Assessment Analysis/final_performance_groups.xlsx")
View(final_performance_groups)
library(readxl)
Wrapper2 <- read_excel("C:/Users/thoma/OneDrive/Documents/NOTRE DAME SENIOR THESIS/Assessment Wrappers/Wrapper2.xlsx",sheet="Cleaned")
View(Wrapper2)
library(readxl)
Wrapper3 <- read_excel("C:/Users/thoma/OneDrive/Documents/NOTRE DAME SENIOR THESIS/Assessment Wrappers/Wrapper3.xlsx",sheet="Cleaned")
View(Wrapper3)
# Merge final grades by performance groups with Wrapper2
final2 <- merge(final_performance_groups,Wrapper2,by="SID")
View(final2)
# Merge final grades by performance groups with Wrapper3
final3 <- merge(final_performance_groups,Wrapper3,by="SID")
View(final3)
library(tidyverse)
View(final_performance_groups)
View(final2)
# Determine which students did not respond to Wrapper2
final_performance_groups %>% filter(!SID %in% final2$SID)
# Determine which of the 391 students did not respond to Wrapper2
final_performance_groups %>% filter(!SID %in% final2$SID) %>% count(Group)
# Determine which students responded to Wrapper2 but not Wrapper3 (26 students)
final_2 %>% filter(!SID %in% final3$SID) %>% count(Group)
# Determine which students responded to Wrapper2 but not Wrapper3 (26 students)
final2 %>% filter(!SID %in% final3$SID) %>% count(Group)
# Determine which students responded to Wrapper2 but not Wrapper3
final2 %>% filter(!SID %in% final3$SID) %>% count(Group)
# Determine which students did not repond to Wrapper3
final_performance_groups %>% filter(!SID %in% final3$SID) %>% count(Group)
# Determine which students responded to Wrapper3 but not Wrapper2
final3 %>% filter(!SID %in% final2$SID) %>% count(Group)
# Determine which students did not respond to either wrapper
final_performance_groups %>% filter(!SID %in% final2$SID & !SID %in% final3$SID)
# Determine which students did not respond to either wrapper
final_performance_groups %>% filter(!SID %in% final2$SID & !SID %in% final3$SID) %>% count(Group)
# Check how many students were in each performance group in the entire dataset (391 students)
final_performance_groups %>% count(Group)
# Check how many students were in each performance group for the Exam 1 Wrapper
final2 %>% count(Group)
# Check how many students were in each performance group for the Exam 3 Wrapper
final3 %>% count(Group)
# Check how many students were in each performance group for the combined responses (i.e. reponded to both wrappers)
final_performance_group %>% filter(SID %in% final2$SID & SID %in% final3$SID)
# Check how many students were in each performance group for the combined responses (i.e. reponded to both wrappers)
final_performance_groups %>% filter(SID %in% final2$SID & SID %in% final3$SID)
# Check how many students were in each performance group for the combined responses (i.e. reponded to both wrappers)
final_performance_groups %>% filter(SID %in% final2$SID & SID %in% final3$SID) %>% count(Group)
# Determine which students did not respond to Wrapper2
final_performance_groups %>% filter(!SID %in% final2$SID) %>% count(Group)
# Determine which students responded to Wrapper2 but not Wrapper3
final2 %>% filter(!SID %in% final3$SID) %>% count(Group)
# Determine which students did not repond to Wrapper3
final_performance_groups %>% filter(!SID %in% final3$SID) %>% count(Group)
# Determine which students responded to Wrapper3 but not Wrapper2
final3 %>% filter(!SID %in% final2$SID) %>% count(Group)
# Determine which students did not respond to either wrapper
final_performance_groups %>% filter(!SID %in% final2$SID & !SID %in% final3$SID) %>% count(Group)
data(hearth)
data(iris)
force(iris)
install.packages("ordinalForest")
# Import libraries
library(ordinalForest)
96-20
187-22
responses <- data.frame(
Developing = c(30,12),
Succeeding = c(76,20),
Thriving = c(165,22),
row.names = c("Developing", "Succeeding", "Thriving"),
col.names = c("Stay In", "Drop Out")
)
responses <- data.frame(
Developing = c(30,12),
Succeeding = c(76,20),
Thriving = c(165,22),
col.names = c("Developing", "Succeeding", "Thriving"),
row.names = c("Stay In", "Drop Out")
)
responses <- data.frame(
Developing = c(30,12),
Succeeding = c(76,20),
Thriving = c(165,22),
)
responses <- data.frame(
Developing = c(30,12),
Succeeding = c(76,20),
Thriving = c(165,22)
)
View(responses)
responses <- data.frame(
Developing = c(30,12),
Succeeding = c(76,20),
Thriving = c(165,22),
row.names = c("Stay In","Drop Out")
)
View(responses)
# Conduct Chi-Square Test
chisq.test <- chisq.test(responses)
chisq
# Conduct Chi-Square Test
chisq <- chisq.test(responses)
chisq
# Chi-Square Tests of Independence
# Create Group vs. Response Status Dataframe
responses <- data.frame(
Developing = c(30,12),
Succeeding = c(76,20),
Thriving = c(165,22),
row.names = c("Stay In","Drop Out")
)
# Conduct Chi-Square Test of Independence between
# Performance Group and Response Status
chisq <- chisq.test(responses)
chisq
View(responses)
View(responses)
View(responses)
# Calculate the proportion of drop outs in each performance group category
# Developing
responses[2,1]/sum(responses$Developing)
# Proportional odds models
# Import libraries
library(mass)
library(smotefamily)
library(scutr)
# Import Gradebook
library(readxl)
Gradebook <- read_excel("C:/Users/thoma/OneDrive/Documents/NOTRE DAME SENIOR THESIS/Predictive Models/Complete_Gradebook.xlsx")
View(Gradebook)
# Split into training dataset and test dataset
set.seed(123) # Set seed for reproducibility
trainind <- sort(sample(1:nrow(Gradebook), size=floor(nrow(Gradebook)*(0.7)))) # 70% training, 30% testing
testind <- setdiff(1:nrow(Gradebook), trainind)
datatrain <- Gradebook[trainind,]
datatest <- Gradebook[testind,]
# Check how many observations are in each class in the original training data
table(datatrain$Class)
class_1 <- oversample_smote(datatrain[,c("Quiz1_A1","Quiz2_A1","Quiz3_A1","Exam1","Quiz4_A1","Quiz5_A1","Exam2","Class")],1,"Class",161)
class_2 <- oversample_smote(datatrain[,c("Quiz1_A1","Quiz2_A1","Quiz3_A1","Exam1","Quiz4_A1","Quiz5_A1","Exam2","Class")],2,"Class",161)
class_3 <- datatrain[,c("Quiz1_A1","Quiz2_A1","Quiz3_A1","Exam1","Quiz4_A1","Quiz5_A1","Exam2","Class")] %>% filter(Class==3)
W4_train <- rbind(class_1,class_2,class_3)
W4_train$Class <- factor(W4_train$Class)
class_3 <- datatrain[,c("Quiz1_A1","Quiz2_A1","Quiz3_A1","Exam1","Quiz4_A1","Quiz5_A1","Exam2","Class")] %>% filter(Class==3)
library(tidyverse)
class_3 <- datatrain[,c("Quiz1_A1","Quiz2_A1","Quiz3_A1","Exam1","Quiz4_A1","Quiz5_A1","Exam2","Class")] %>% filter(Class==3)
W4_train <- rbind(class_1,class_2,class_3)
W4_train$Class <- factor(W4_train$Class)
install.packages("knitr")
install.packages("kableExtra")
library(knitr)
library(kableExtra)
data <- data.frame(
Name = c("John", "Jane", "Bob"),
Age = c(25, 30, 22),
Score = c(95, 88, 75)
)
View(data)
basic_table <- kable(data, format = "html", caption = "Sample Table")
basic_table
# Style the table
styled_table <- basic_table %>%
kable_styling("striped", full_width = FALSE) %>%
row_spec(0, bold = TRUE, color = "white", background = "#2A3F54") %>%
column_spec(1:3, bold = TRUE)
# Print the styled table
print(styled_table)
kable(data[1:3,1:3])
print(kable(data[1:3,1:3]))
table <- kable(data[1:3,1:3])
print(table)
# Print the styled table
kable(data[1:3, 1:3], format="latex", booktabs = T)`
# Print the styled table
kable(data[1:3, 1:3], format="latex", booktabs = T)
# Print the styled table
kable(data[1:3, 1:3], format="latex", booktabs = T)
# Print the styled table
print(styled_table)
# Print the styled table
print(styled_table)
styled_table <- basic_table %>%
kable_styling("striped", full_width = FALSE) %>%
row_spec(0, bold = FALSE, color = "white", background = "#2A3F54") %>%
column_spec(1:3, bold = TRUE)
exit
stop
clear
data <- data.frame(
Name = c("John", "Jane", "Bob"),
Age = c(25, 30, 22),
Score = c(95, 88, 75)
)
# Print the styled table
print(styled_table)
print(basic_table)
print(basic_table)
basic_table <- kable(data, format = "html", caption = "Sample Table")
styled_table <- basic_table %>%
kable_styling("striped", full_width = TRUE) %>%
row_spec(0, bold = FALSE, color = "white") %>%
column_spec(1:3, bold = FALSE)
# Print the styled table
print(styled_table)
# Style the table
styled_table <- basic_table %>%
kable_styling("striped", full_width = FALSE) %>%
row_spec(0, bold = FALSE, color = "white") %>%
column_spec(1:3, bold = FALSE)
styled_table <- basic_table %>%
kable_styling("striped", full_width = FALSE) %>%
row_spec(0, bold = FALSE, color = "white") %>%
column_spec(1:3, bold = FALSE)
# Print the styled table
print(styled_table)
knitr::kable(data)
print(knitr::kable(data))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(
Name = c("John", "Jane", "Bob"),
Age = c(25, 30, 22),
Score = c(95, 88, 75)
knitr::kable(df)
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(
Name = c("John", "Jane", "Bob"),
Age = c(25, 30, 22),
Score = c(95, 88, 75))
knitr::kable(df)
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(
Name = c("John", "Jane", "Bob"),
Age = c(25, 30, 22),
Score = c(95, 88, 75))
knitr::kable(df)
plot(pressure)
df <- data.frame(
Name = c("John", "Jane", "Bob"),
Age = c(25, 30, 22),
Score = c(95, 88, 75))
knitr::kable(df)
install.packages("latexpdf")
library(kable)
library(knitr)
library(kableExtra)
df <- cbind(mtcars[1:5,], mtcars[1:5,])
knitr::kable(df)
df <- cbind(mtcars[1:5,], mtcars[1:5,])
knitr::kable(df) %>%
kableExtra::kable_styling(bootstrap_options = "striped")
df <- cbind(mtcars[1:5,], mtcars[1:5,])
knitr::kable(df, format='latex', booktabs=TRUE)
library(knitr)
library(kableExtra)
library(tidyverse)
library(knitr)
library(kableExtra)
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption="Table 1") %>%
kableExtra::kable_styling()
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(format = 'latex',booktabs = TRUE)
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption = "Table 1") %>%
kableExtra::kable_styling(stripe_color="Black")
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption = "Table 1", format="Latex") %>%
kableExtra::kable_styling(stripe_color="Black")
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption = "Table 1") %>%
kableExtra::kable_styling()
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption = "Table 1") %>%
kableExtra::kable_styling(striped=TRUE)
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption = "Table 1") %>%
kableExtra::kable_styling(bootstrap_options = "True")
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption = "Table 1") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
library(knitr)
library(kableExtra)
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption = "Table 1") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
kable(df, format = "latex", booktabs = TRUE) %>%
kable_styling()
kable(df, format = "latex", booktabs = TRUE)
knitr:kable(df)
library(knitr)
library(kableExtra)
knitr:kable(df)
df <- cbind(mtcars[1:5,], mtcars[1:5,])
df %>%
knitr::kable(caption = "Table 1") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
knitr::kable(df)
dt <- mtcars[1:5, 1:4]
# LaTeX Table
kbl(dt, booktabs = T, caption = "Demo Table") %>%
kable_styling(latex_options = c("striped", "hold_position"),
full_width = F) %>%
add_header_above(c(" ", "Group 1" = 2, "Group 2[note]" = 2)) %>%
footnote(c("table footnote"))
long_dt <- rbind(mtcars, mtcars)
kbl(long_dt, longtable = T, booktabs = T, caption = "Longtable") %>%
add_header_above(c(" ", "Group 1" = 5, "Group 2" = 6)) %>%
kable_styling(latex_options = c("repeat_header"))
kbl(dt, booktabs = T)
kbl(dt, format = "latex", booktabs = T)
kbl(dt, booktabs = T)
kbl(dt, vline = "TRUE", booktabs = T)
kbl(dt, vline = "|", booktabs = T)
kbl(dt)
# Chi-Square Tests of Independence
# Create Group vs. Response Status Dataframe
# "Stay In" corresponds to responding to E1 and E3 Wrappers
# "Drop out" corresponds to reponding to E1 Wrapper but not E3 Wrapper
responses <- data.frame(
Developing = c(30,12),
Succeeding = c(76,20),
Thriving = c(165,22),
row.names = c("Stay In","Drop Out")
)
# Conduct Chi-Square Test of Independence between
# Performance Group and Response Status
chisq <- chisq.test(responses)
chisq
# X-squared = 8.7419, df = 2, p-value = 0.01264
# There is evidence of an association
# between performance group and response status
# Calculate the proportion of drop outs in each performance group category
# Developing
responses[2,1]/sum(responses$Developing)
# Succeeding
responses[2,1]/sum(responses$Succeeding)
# Thriving
responses[2,1]/sum(responses$Developing)
# Chi-Square Tests of Independence
# Create Group vs. Response Status Dataframe
# "Stay In" corresponds to responding to E1 and E3 Wrappers
# "Drop out" corresponds to reponding to E1 Wrapper but not E3 Wrapper
responses <- data.frame(
Developing = c(30,12),
Succeeding = c(76,20),
Thriving = c(165,22),
row.names = c("Stay In","Drop Out")
)
# Conduct Chi-Square Test of Independence between
# Performance Group and Response Status
chisq <- chisq.test(responses)
chisq
# X-squared = 8.7419, df = 2, p-value = 0.01264
# There is evidence of an association
# between performance group and response status
# Calculate the proportion of drop outs in each performance group category
# Developing
responses[2,1]/sum(responses$Developing)
# Succeeding
responses[2,1]/sum(responses$Succeeding)
# Thriving
responses[2,1]/sum(responses$Developing)
View(responses)
# Thomas Joyce Exercise 10 Script
# Set working directory
setwd("C:/Users/thoma/OneDrive/Documents/NOTRE DAME FALL 2023/Intro to Biocomputing/Exercise 10/Biocomputing-Ex-10")
# Import libraries
library(ggplot2)
# 1. Create a graph depicting the cumulative score for
# each team as a function of time
# Import scores dataset
scores <- read.delim("UWvMSU_1-22-13.txt", header = TRUE, sep = "")
# Use a for loop to create vectors of cumulative scores for both teams at each timepoint
UW_score = 0
MSU_score = 0
times = c(0)
UW = c(0)
MSU = c(0)
for (i in 1:nrow(scores)){
times <- c(times,scores[i,1])
if (scores[i,2]=="UW"){
UW_score <- UW_score + scores[i,3]
UW <- c(UW,UW_score)
MSU <- c(MSU,MSU_score)
} else {
MSU_score <- MSU_score + scores[i,3]
UW <- c(UW,UW_score)
MSU <- c(MSU,MSU_score)
}
}
# Create cumulative scores dataframe
cumulative_scores <- data.frame(times,UW,MSU)
# Create plot
ggplot(cumulative_scores, aes(x = times)) +
geom_line(aes(y = UW, color="UW"), linetype = "solid", size = 1) +
geom_line(aes(y = MSU, color="MSU"), linetype = "solid", size = 1) +
scale_color_manual(breaks=c("UW","MSU"),values=c("red","darkgreen"))+
labs(title = "Game Summary", x = "Time", y = "Cumulative Score",color="Team")
# 2. Write a game called "guess my number."
guess_number <- function(x){
number <- sample(1,100)
if (x<number){
print("Higher")
} else if (x>number){
print("Lower")
} else {
print("Correct")
}
}
guess_number(7)
guess_number(7)
guess_number <- function(x){
number <- sample(1:100,1)
if (x<number){
print("Higher")
} else if (x>number){
print("Lower")
} else {
print("Correct")
}
}
guess_number
guess_number(7)
guess_number <- function(x){
number <- sample(1:100,1)
print(number)
if (x<number){
print("Higher")
} else if (x>number){
print("Lower")
} else {
print("Correct")
}
}
guess_number(7)
guess_number(67)
guess_number(67)
guess_number(67)
